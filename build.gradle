// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.61'
    ext.detekt_version = "1.5.1"
    repositories {
        google()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.3'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.1.0'
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:9.2.1"
        classpath 'com.google.firebase:perf-plugin:1.3.1'
    }
}

plugins {
    id("io.gitlab.arturbosch.detekt").version("1.5.1")
}

allprojects {
    repositories {
        //Ucrop + MpChart + BottomNav + LabelView + Tooltip
        maven { url "https://jitpack.io" }
        //BottomNav
        maven { url "https://maven.google.com" }
        maven { url "https://sdk.smartlook.com/android/release" }
        jcenter()
        google()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }
}

detekt {
    failFast = true // fail build on any finding
    buildUponDefaultConfig = true // preconfigure defaults
    config = files("$projectDir/config/detekt.yml") // point to your custom config defining rules to run, overwriting default behavior
    baseline = file("$projectDir/config/baseline.xml") // a way of suppressing issues before introducing detekt

    reports {
        html.enabled = true // observe findings in your browser with structure and code snippets
        xml.enabled = true // checkstyle like format mainly for integrations like Jenkins
        txt.enabled = true // similar to the console output, contains issue signature to manually edit baseline files
    }
}
task clean(type: Delete) {
    delete rootProject.buildDir
}

task installGitHook(type: Copy) {
    from new File(rootProject.rootDir, 'pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0777
}
tasks.getByPath(':app:preBuild').dependsOn installGitHook