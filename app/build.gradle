import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: 'checkstyle'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

//apply from: '../ktlint.gradle'
apply plugin: "org.jlleitschuh.gradle.ktlint"

repositories {
    maven { url 'https://dl.bintray.com/drummer-aidan/maven' }
}

checkstyle {
    // assign the latest checkstyle version explicitly
    // default version is very old, likes 5.9
    toolVersion = '8.29'
    // checkstyle.xml copy from:
    // https://raw.githubusercontent.com/checkstyle/checkstyle/checkstyle-8.6/src/main/resources/google_checks.xml
    // the version should be as same as plugin version
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        applicationId "com.mycity4kids"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 200
        versionName "14.0.8"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    configurations {
        all*.exclude group: 'com.android.volley'
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

check.dependsOn ktlint

dependencies {
    def work_version = "2.3.4"

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.work:work-runtime:$work_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.ads:ads-identifier:1.0.0-alpha04'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    implementation 'com.google.android.gms:play-services-plus:17.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    implementation 'com.google.android.libraries.places:places:2.2.0'
    implementation 'com.google.android.gms:play-services-analytics:17.0.0'
    implementation 'com.google.android.gms:play-services-auth:18.0.0'
    implementation 'com.google.android.gms:play-services-auth-api-phone:17.4.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'com.google.firebase:firebase-messaging:20.1.7'
    implementation 'com.google.firebase:firebase-core:17.4.1'
    implementation 'com.google.firebase:firebase-storage:19.1.1'
    implementation 'com.google.firebase:firebase-auth:19.3.1'
    implementation 'com.google.firebase:firebase-analytics:17.4.1'
    implementation 'com.google.firebase:firebase-config:19.1.4'
    implementation 'com.google.firebase:firebase-crashlytics:17.0.0'
    implementation 'com.google.firebase:firebase-perf:19.0.7'

    implementation 'com.squareup.retrofit2:retrofit:2.7.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.7.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.7.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    implementation 'com.squareup.okhttp3:okhttp:4.2.2'
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'com.mikhaellopez:circularimageview:3.0.2'
    implementation 'org.apmem.tools:layouts:1.10@aar'
    implementation 'com.github.yalantis:ucrop:2.2.4'
    implementation 'com.getbase:floatingactionbutton:1.10.1'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'com.afollestad:easyvideoplayer:0.3.0'
    implementation 'com.github.ittianyu:BottomNavigationViewEx:2.0.4'
    implementation 'q.rorbin:badgeview:1.1.0'
    implementation 'com.akexorcist:RoundCornerProgressBar:2.0.3'
    implementation 'com.github.stfalcon:stfalcon-imageviewer:1.0.0'
    implementation 'com.github.linger1216:labelview:v1.1.2'
    implementation 'com.googlecode.mp4parser:isoparser:1.1.21'
    implementation 'pub.devrel:easypermissions:3.0.0'
    implementation 'com.github.douglasjunior:android-simple-tooltip:0.2.3'
    implementation 'com.pierfrancescosoffritti.androidyoutubeplayer:core:10.0.5'
    implementation 'commons-io:commons-io:2.4'
    implementation 'org.wordpress:utils:1.21'
    implementation 'com.google.android.exoplayer:exoplayer-core:2.9.3'
    implementation 'com.google.android.exoplayer:exoplayer-dash:2.9.3'
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.9.3'
    implementation 'com.google.android.exoplayer:exoplayer-hls:2.9.3'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'com.facebook.android:facebook-android-sdk:5.13.0'
    implementation 'com.facebook.shimmer:shimmer:0.1.0@aar'
    implementation 'io.branch.sdk.android:library:5.0.1'
    implementation 'com.mixpanel.android:mixpanel-android:5.6.4'
    implementation 'com.smartlook.recording:app:1.3.0-native'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.github.nkzawa:socket.io-client:0.6.0'

    implementation "com.github.YarikSOffice:lingver:1.2.1"

    implementation 'com.google.guava:guava:28.0-android'

    compile('io.socket:socket.io-client:0.8.3') {
        exclude group: 'org.json', module: 'json'
    }
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation project(path: ':aztec')
    implementation project(path: ':wordpress-comments')
    implementation project(path: ':glide-loader')
    implementation project(path: ':wordpress-shortcodes')
    detekt "io.gitlab.arturbosch.detekt:detekt-formatting:$detekt_version"
    detekt("io.gitlab.arturbosch.detekt:detekt-cli:$detekt_version")
    implementation 'org.apache.commons:commons-lang3:3.3.5'
}

detekt {
    toolVersion = "$detekt_version"
    input = files("src/main/java")
    config = files("../config/detekt/detekt.yml")
    reports {
        xml {
            enabled = true
        }
        html {
            enabled = true
        }
    }
}

task checkstyle(type: Checkstyle) {
    classpath = files()
    source "${project.rootDir}"
    include '**/*.java'
    exclude '**/test/**'
    exclude '**/androidTest/**'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    def configProps = ['proj.module.dir': projectDir.absolutePath]
    configProperties configProps
    // Define the output folder of the generated reports
    reports {
        html {
            enabled true
            destination rootProject.file("build/reports/checkstyle/checkstyle.html")
        }
        xml {
            enabled true
            destination rootProject.file("build/reports/checkstyle/checkstyle.xml")
        }
    }
}

// Execute Checkstyle on all modified files
task checkstyleChanged(type: Checkstyle) {
    def changedFiles = getChangedFiles()
    include changedFiles
}

/**
 * Get all files that are changed but not deleted nor renamed.
 * Compares to master or the specified target branch.
 *
 * @return list of all changed files
 */
def getChangedFiles() {
    // Get the target and source branch
    def ghprbTargetBranch = System.getenv("ghprbTargetBranch")
    def ghprbSourceBranch = System.getenv("ghprbSourceBranch")
    println ghprbTargetBranch
    println ghprbSourceBranch
    // Compare to master if no branch specified
    def targetBranch
    if (project.hasProperty("branch")) {
        targetBranch = project.property("branch")
    } else {
        targetBranch = ghprbTargetBranch ? "origin/${ghprbTargetBranch}" : getParentBranch()
    }
    def sourceBranch = ghprbSourceBranch ? "origin/${ghprbSourceBranch}" : ""

    // Get list of all changed files including status
    def systemOutStream = new ByteArrayOutputStream()
    def command = "git diff HEAD --name-status --diff-filter=dr"
    command.execute().waitForProcessOutput(systemOutStream, System.err)
    def allFiles = systemOutStream.toString().trim().split('\n')
    systemOutStream.close()

    // Remove the status prefix
    Pattern statusPattern = Pattern.compile("(\\w)\\t+(.+)")
    List<String> files = new ArrayList<>()
    for (file in allFiles) {
        println file
        Matcher matcher = statusPattern.matcher(file)
        if (matcher.find()) {
            files.add(matcher.group(2))
        }
    }

    // Return the list of touched files
    files
}

/**
 * Determines the parent branch.
 *
 * @return the found parent branch or master if not possible
 */
def getParentBranch() {
    def branch = ""
    // Get short name of the HEAD branch
    def branchDeterminer = "git rev-parse --abbrev-ref HEAD".execute()
    branchDeterminer.in.eachLine { line -> branch = line }
    branchDeterminer.err.eachLine { line -> println line }
    branchDeterminer.waitFor()
    // Search all branches for parent
    def branchLine = 'git show-branch -a'.execute().text.readLines().find {
        it.contains('*') && !(it ==~ ".*\\[$branch[~^\\]].*")
    }
    try {
        // Filter parent branch name
        def parent = (branchLine =~ /\[([^~^\]]*)[~^\]]/)[0][1]
        return parent
    } catch (Exception ignored) {
        println "Could not determine parent branch, compare to master"
        return "master"
    }
}

// Customize all the Checkstyle tasks
tasks.withType(Checkstyle) {
    // Specify all files that should be checked
    classpath = files()
    source "${project.rootDir}"
    reports {
        html {
            enabled true
            destination rootProject.file("build/reports/checkstyle/checkstyle.html")
        }
        xml {
            enabled true
            destination rootProject.file("build/reports/checkstyle/checkstyle.xml")
        }
    }
}
